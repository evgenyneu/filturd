---
description: Code style
globs: *.rs, *.ts, *.js
---

# Code style

## Separate multiline blocks with empty lines

For readability, always separate multiline blocks with empty lines. Multiline blocks are blocks that span more than one line (if statmenets, loops, functions with manu arguments that take multiple lines.

### An example in Rust

Incorrect:

```rust
assert_eq!(blocks[2].name, BlockName::Show);
assert_eq!(
    blocks[2].lines,
    vec!["Class \"Currency\"", "SetFontSize 40"]
);
```

Correct (there is empty line before the second multiline assert):

```rust
assert_eq!(blocks[2].name, BlockName::Show);
assert_eq!(
    blocks[2].lines,
    vec!["Class \"Currency\"", "SetFontSize 40"]
);
```

### An example it Typescript

Incorrect:


```TypeScript
const { itemDescription } = useItemDescription();
const blocks = ref<Array<{
  order: number;
  name: string;
  items: Array<{ name: string; params: string[] }>;
}>>([]);
```

Correct (there is an empty line before the `const blocks`):

```TypeScript
const { itemDescription } = useItemDescription();

const blocks = ref<Array<{
  order: number;
  name: string;
  items: Array<{ name: string; params: string[] }>;
}>>([]);
```

### Another TypeScript example

Incorrect:

```TypeScript
if (sortKey.value === 'order') {
  return (a.order - b.order) * modifier;
}
return (a.name.localeCompare(b.name)) * modifier;
```

Correct (there is a blank line after the multi-line if statemnt):

```TypeScript
if (sortKey.value === 'order') {
  return (a.order - b.order) * modifier;
}
return (a.name.localeCompare(b.name)) * modifier;
```

### Yet another TS example :D

Incorrect (single line statements should not be separated with empty lines)

```TypeScript
if (!path) return null;
const blocks = await invoke<Block[]>("open_file", { path });

printItemNameFrequencies(blocks);

return blocks;
```

Correct (single lines statements are not separated):

```TypeScript
if (!path) return null;
const blocks = await invoke<Block[]>("open_file", { path });
printItemNameFrequencies(blocks);
return blocks;
```

